function create(el)
  el = el or eventloop.create()

  local api = {};
  local private = {};

  if not el or not el.register or not el.setTimeout then
    error('invalid eventloop instance provided');
  end

  local function getChatbox()
    local chatbox = peripheral.find('chatBox');

    if not chatbox then
      error("no chatBox peripheral found");
    end
    return chatbox
  end

  local queueMessages = {};

  function private.dequeueMessages()
    local f = table.remove(queueMessages, 1);

    if f then
      f();

      if #queueMessages > 0 then
        el.setTimeout(private.dequeueMessages, api.getCooldown() / 1000);
      end
    end
  end

  function private.send(sendFn)
    if #queueMessages > 0 then
      table.insert(queueMessages, sendFn);
    else
      local result = sendFn();

      if not result then
        table.insert(queueMessages, sendFn);
        el.setTimeout(private.dequeueMessages, api.getCooldown() / 1000);
      end
    end
  end

  -- TODO: refactor `api.sendMessage`, `api.sendFormattedMessage` and `api.sendMessageToPlayer`

  -- sendMessage
  function api.sendMessage(message, prefix)
    prefix = prefix or 'trapbot'
    return private.send(function()
      return getChatbox().sendMessage(message, prefix);
    end)
  end

  -- sendFormattedMessage
  function api.sendFormattedMessage(payload, prefix)
    prefix = prefix or 'trapbot'
    return private.send(function()
      return getChatbox().sendFormattedMessage(textutils.serializeJSON(payload), prefix);
    end)
  end

  -- sendMessageToPlayer
  function api.sendMessageToPlayer(message, user, prefix)
    prefix = prefix or 'trapbot'
    return private.send(function()
      return getChatbox().sendMessageToPlayer(message, user, prefix);
    end)
  end

  -- getCooldown (result in ms)
  function api.getCooldown()
    return getChatbox().getOperationCooldown('chatMessage');
  end

  -- listen
  function api.listen(handler)
    return el.register('chat', handler);
  end

  -- start
  function api.start()
    return el.startLoop();
  end

  return api;
end

new = create

