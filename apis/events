local handlersCounter = 0
local allHandlers = {}

local runningHandlers = nil
local unregisterQueue = {}

local function resetAll()
  handlersCounter = 0;
  allHandlers = {};
  runningHandlers = nil;
  unregisterQueue = {}
end

local function flushUnregisterQueue()
  if #unregisterQueue == 0 then
    return
  end

  for _, f in pairs(unregisterQueue) do
    f()
  end

  unregisterQueue = {}
end

local END_OF_LOOP = '@libevents/END_OF_LOOP'

STOP = 'STOP'

function unregister(eventName, handler)
  assert(type(eventName) == 'string', 'bad argument #1 (string expected)')
  assert(type(handler) == 'function', 'bad argument #2 (function expected)')

  local function removeHandler()
    local handlers = allHandlers[eventName]

    if not handlers then
      error("libevents error: no handler registered for the '" .. eventName .. "' event")
    end

    if handlers[handler] then
      handlers[handler] = nil
      handlersCounter = handlersCounter - 1;
      if handlersCounter == 0 then
        os.queueEvent(END_OF_LOOP)
      end
    end
  end

  if runningHandlers then
    table.insert(unregisterQueue, function()
      return removeHandler()
    end)
    return
  end

  return removeHandler()
end

function register(eventName, handler)
  assert(type(eventName) == 'string', 'bad argument #1 (string expected)')
  assert(type(handler) == 'function', 'bad argument #2 (function expected)')

  if not allHandlers[eventName] then
    allHandlers[eventName] = {}
  end

  local handlers = allHandlers[eventName]
  if handlers[handler] then
    error("libevents error: handler already registered for event '" .. eventName .. "'")
  end

  handlers[handler] = handler;
  handlersCounter = handlersCounter + 1;

  return function()
    unregister(eventName, handler)
  end
end

function stopLoop()
  os.queueEvent(END_OF_LOOP)
end

function runLoop()
  if handlersCounter == 0 then
    error("libevents error: try to run event loop without handlers (use 'register' before 'runLoop')")
  end

  while true do
    local packed = table.pack(os.pullEvent())
    local eventName = table.remove(packed, 1)
    local handlers = allHandlers[eventName]

    if handlers then
      runningHandlers = eventName
      for _, handler in pairs(handlers) do
        local result_handler = handler(table.unpack(packed))
        if result_handler then
          unregister(eventName, handler)
        end
      end
      runningHandlers = nil
      flushUnregisterQueue()
    end

    if eventName == END_OF_LOOP then
      resetAll()
      break
    end
  end
end

function test(k)
  if k == keys.q then
    print('Q pressed!');
    return STOP
  end
end

local dispose = register('key_up', test)

register('key_up', function(k)
  if k == keys.k then
    dispose()
    return STOP
  end
end)
