local DEFAULT_SERVER_COMMAND_CHANNEL = 140;
local DEFAULT_OUTPUT_RESPONSE_FEEDBACK_CHANNEL = 141;
local DEFAULT_INPUT_RESPONSE_FEEDBACK_CHANNEL = 142;

local function noop()
end

function create(el, serverCommandChan, outputResponseChan, inputResponseChan)
  el = el or events

  if not el or not el.register then
    error('rsclient create error: bad argument #1 (eventloop instance expected)')
  end

  serverCommandChan = serverCommandChan or DEFAULT_SERVER_COMMAND_CHANNEL;
  outputResponseChan = outputResponseChan or DEFAULT_OUTPUT_RESPONSE_FEEDBACK_CHANNEL;
  inputResponseChan = inputResponseChan or DEFAULT_INPUT_RESPONSE_FEEDBACK_CHANNEL;

  assert(type(serverCommandChan) == 'number', 'bad argument #2 (number expected)');
  assert(type(outputResponseChan) == 'number', 'bad argument #3 (number expected)');
  assert(type(inputResponseChan) == 'number', 'bad argument #4 (number expected)');

  local api = {}

  -- example:
  -- rsclient.write(colors.red + colors.blue, true)
  function api.writeOutput(color, colorstate)
    if type(color) ~= "number" then
      error("librsclient error: invalid color (number expected)")
    end

    if type(colorstate) ~= "boolean" then
      error("librsclient error: invalid colorstate (boolean expected)")
    end

    local type;
    if colorstate then
      type = "on"
    else
      type = "off"
    end

    net.send(serverCommandChan, outputResponseChan, {
      type = type,
      payload = color
    })
  end

  api.write = writeOutput

  function api.resetOutput()
    net.send(serverCommandChan, outputResponseChan, {
      type = 'reset'
    });
  end

  api.reset = api.resetOutput

  function api.requestInputState()
    return net.request(serverCommandChan, inputResponseChan, {
      type = "getstate_input"
    })
  end

  function api.requestOutputState()
    return net.request(serverCommandChan, outputResponseChan, {
      type = "getstate"
    })
  end

  function api.listenOutputState(handler)
    assert(type(handler) == 'function', 'bad argument #1 (function expected)');

    local colormask = 0;
    local server = net.create_server(el);

    local disposeListen = server.listen(outputResponseChan, function(_, newColormask)
      if newColormask ~= colormask then
        colormask = newColormask
        return handler(newColormask)
      end
    end)

    el.onStart(function()
      -- warning: need a new eventloop instance here
      local rsc = create(eventloop.create(), serverCommandChan, outputResponseChan, inputResponseChan)
      colormask = rsc.requestOutputState();

      if handler(colormask) == el.STOP then
        disposeListen();
      end
    end)

    return disposeListen;
  end

  function api.listenOutput(colorname, handler)
    assert(type(colorname) == 'string', 'bad argument #1 (string expected)');
    assert(type(handler) == 'function', 'bad argument #2 (function expected)');

    local color = colors[colorname]

    if not color then
      error("rsclient listenOutput error: invalid color name '" .. colorname .. "'")
    end

    local colormask = 0;

    return api.listenOutputState(function(newColormask)
      local result_handler = nil

      if not colors.test(colormask, color) and colors.test(newColormask, color) then
        result_handler = handler(true)
      elseif colors.test(colormask, color) and not colors.test(newColormask, color) then
        result_handler = handler(false)
      end
      colormask = newColormask;

      return result_handler;
    end);
  end

  function api.listenInputState(handler)
    assert(type(handler) == 'function', 'bad argument #1 (function expected)');

    local colormask = 0;
    local server = net.create_server(el);

    local disposeListen = server.listen(inputResponseChan, function(_, newColormask)
      if newColormask ~= colormask then
        colormask = newColormask
        return handler(newColormask)
      end
    end)

    el.onStart(function()
      -- warning: need a new eventloop instance here
      local rsc = create(eventloop.create(), serverCommandChan, outputResponseChan, inputResponseChan)
      colormask = rsc.requestOutputState();

      if handler(colormask) == el.STOP then
        disposeListen();
      end
    end)

    return disposeListen
  end

  function api.listenInput(colorname, handler)
    assert(type(colorname) == 'string', 'bad argument #1 (string expected)');
    assert(type(handler) == 'function', 'bad argument #2 (function expected)');

    local color = colors[colorname]

    if not color then
      error("rsclient listenInput error: invalid color name '" .. colorname .. "'")
    end

    local colormask = 0;

    return api.listenInputState(function(newColormask)
      local result_handler = nil

      if not colors.test(colormask, color) and colors.test(newColormask, color) then
        result_handler = handler(true)
      elseif colors.test(colormask, color) and not colors.test(newColormask, color) then
        result_handler = handler(false)
      end
      colormask = newColormask;

      return result_handler;
    end);
  end

  return api
end
