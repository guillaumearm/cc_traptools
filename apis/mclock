-- mclock: a simple Musical Clock api
local DEFAULT_BPM = 127;
local DEFAULT_STEP_DIV = 4;

local noop = function(_)
end

function create(el)
  local api = {};

  el = el or events;

  local bpm = DEFAULT_BPM;
  local handler = noop;
  local stepDiv = DEFAULT_STEP_DIV;

  local play = false;
  local stopped = false;

  local dispose = noop;
  local disposeOnStart = noop;
  local counter = 1;

  el.onStop(function()
    if play then
      api.pause();
    end
  end)

  local function runDispose()
    dispose();
    disposeOnStart();

    dispose = noop;
    disposeOnStart = noop;
  end

  local function getTime()
    return 60 / bpm / stepDiv;
  end

  local function executeHandler()
    local result_handler = handler(counter);
    if play or not stopped then
      counter = counter + 1;
    end
    return result_handler;
  end

  local function start_interval()
    dispose = el.setTimeout(function()
      if play then
        executeHandler();
        -- executeHandler can modify the `play` variable, so we check it again before continuing loop
        if play then
          start_interval();
        end
      end
    end, getTime());
  end

  function api.play()
    if not play then
      play = true;
      stopped = false;

      if el.isRunningLoop() then
        executeHandler();
      else
        disposeOnStart = el.onStart(executeHandler);
      end

      -- executeHandler can modify the `play` variable, so we check it again before continuing loop
      if play then
        start_interval();
      end
    end
  end

  api.start = api.play

  function api.pause()
    play = false;
    runDispose();
  end

  function api.reset()
    counter = 1;
  end

  function api.stop()
    stopped = true;
    api.pause();
    api.reset();
  end

  function api.getBpm()
    return bpm;
  end

  function api.setBpm(givenBpm)
    assert(type(givenBpm) == 'number' and givenBpm > 0, 'bad argument #1 (number > 0 expected)');
    bpm = givenBpm;
  end

  function api.getStepDiv()
    return stepDiv;
  end

  function api.setStepDiv(givenStepDiv)
    assert(type(givenStepDiv) == 'number' and givenStepDiv > 0, 'bad argument #1 (number > 0 expected)');
    stepDiv = givenStepDiv;
  end

  function api.setHandler(h)
    assert(type(h) == 'function', 'bad argument #1 (function expected)');
    handler = h

    local disposed = false;

    return function()
      if not disposed then
        disposed = true;
        handler = noop;
      end
    end
  end

  function api.isRunning()
    return play
  end

  return api;
end

new = create;
