local NETWORK_TIMEOUT = 2; -- in seconds

local memoizedModem = nil;

local function getModem()
  if memoizedModem then
    return memoizedModem
  end

  local modem = peripheral.find("modem");

  if not modem then
    error("network error: no modem found")
  end

  memoizedModem = modem;
  return modem
end

-- el = eventloop instance
function create_server(el)
  el = el or events

  if not el or not el.register then
    error('network create_server error: invalid given eventloop instance')
  end

  local modem = getModem()

  local disposeFns = {};
  local registeredChanOldState = {}

  local api = {}

  local function safeClose(chan)
    local state = registeredChanOldState[chan];
    if state and state.refcount > 0 then
      state.refcount = state.refcount - 1

      if state.refcount <= 0 and not state.isOpen then
        registeredChanOldState[chan] = nil
        modem.close(chan)
      end
    end
  end

  function api.start()
    return el.startLoop()
  end

  function api.listen(channel, handler)
    assert(type(channel) == 'number', 'bad argument #1 (number expected)');
    assert(type(handler) == 'function', 'bad argument #2 (function expected)');

    local state = registeredChanOldState[channel]
    if not state then
      state = {
        refcount = 1,
        isOpen = modem.isOpen(channel)
      }
      modem.open(channel)
      registeredChanOldState[channel] = state
    else
      state.refcount = state.refcount + 1
    end

    el.onStop(function()
      safeClose(channel)
    end)

    local dispose = el.register('modem_message', function(_side, chan, replyChan, payload, distance)
      if chan == channel then
        local result_handler = handler(replyChan, payload, distance)

        if result_handler == el.STOP then
          safeClose(channel)
        end

        return result_handler
      end
    end)

    local function finalDispose()
      local dispose_result = dispose();
      safeClose(channel);
      return dispose_result;
    end

    table.insert(disposeFns, finalDispose);
    return finalDispose;
  end

  function api.stop()
    -- 1. exec all dispose fns
    for _, d in pairs(disposeFns) do
      d();
    end

    -- 2. close all necessary channels
    for chan, _ in pairs(registeredChanOldState) do
      local state = registeredChanOldState[chan];
      if state then
        if not state.isOpen then
          modem.close(chan)
        end
        registeredChanOldState[chan] = nil;
      end
    end

    -- 3. reset state
    disposeFns = {}
    registeredChanOldState = {}
  end

  return api
end

function send(channel, replyChannel, payload)
  local modem = getModem()
  return modem.transmit(channel, replyChannel, payload)
end

function request(channel, replyChannel, payload)
  local modem = getModem();
  local result = nil;

  local e = eventloop.new()

  local disposeTimeout = function()
  end;

  local disposeMessage = e.register("modem_message", function(_side, chan, _replyChan, message)
    if chan == replyChannel then
      result = message
      disposeTimeout();
      return e.STOP;
    end
  end)

  disposeTimeout = e.setTimeout(function()
    disposeMessage()
  end, NETWORK_TIMEOUT)

  local isInitialResponsePortClosed = not modem.isOpen(replyChannel);

  modem.open(replyChannel)
  modem.transmit(channel, replyChannel, payload)

  e.runLoop()

  if isInitialResponsePortClosed then
    modem.close(replyChannel)
  end

  if not result then
    error('network request error: unable to retrieve response from channel ' .. replyChannel)
  end

  return result;
end

STOP = eventloop.STOP
