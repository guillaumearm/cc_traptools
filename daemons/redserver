local INPUT_SIDE = "left"
local OUTPUT_SIDE = "right"

local SERVER_COMMAND_CHANNEL = 140 -- 141 is usually used for output response feedback
local INPUT_RESPONSE_FEEDBACK_CHANNEL = 142

local rsw = rsw.new(OUTPUT_SIDE);
local rsr = rsr.new(INPUT_SIDE);

local modem = peripheral.find("modem")

if not modem then
  error("rsserver error: no modem found!")
end

local function isValidMessage(msg)
  return type(msg) == 'table' and type(msg.type) == 'string'
end

local function checkMessage(msgType)
  return function(msg)
    return msg.type == msgType and type(msg.payload) == 'number'
  end
end

local isOn = checkMessage('on');
local isOff = checkMessage('off');

local disposeModem = events.register("modem_message", function(modemSide, channel, replyChannel, message, distance)
  if channel == SERVER_COMMAND_CHANNEL and isValidMessage(message) then
    local result_colors = {}
    local oldMask = rsw.mask();

    if message.type == 'reset' then
      if rsw.reset() then
        modem.transmit(replyChannel, replyChannel, rsw.mask())
      end
      result_colors = colorutils.getColors(colors.subtract(oldMask, rsw.mask()));
    elseif message.type == 'getstate' then
      modem.transmit(replyChannel, replyChannel, rsw.mask())
    elseif message.type == 'getstate_input' then
      modem.transmit(replyChannel, replyChannel, rsr.mask())
    elseif isOn(message) then
      if rsw.set(message.payload, true) then
        modem.transmit(replyChannel, replyChannel, rsw.mask());

        result_colors = colorutils.getColors(colors.subtract(rsw.mask(), oldMask));
      end
    elseif isOff(message) then
      if rsw.set(message.payload, false) then
        modem.transmit(replyChannel, replyChannel, rsw.mask());

        result_colors = colorutils.getColors(colors.subtract(oldMask, rsw.mask()));
      end
    end

    for k, v in ipairs(result_colors) do
      local enabled = colors.test(rsw.mask(), colors[v]);
      print(":: write " .. v .. " -> " .. tostring(enabled));
    end
  end
end)

local disposeRedstone = rsr.register(function(colormask)
  -- TODO: print(getColors_difference(oldMask, newMask))
  local channel = INPUT_RESPONSE_FEEDBACK_CHANNEL
  modem.transmit(channel, channel, colormask)
end)

modem.open(SERVER_COMMAND_CHANNEL)

print('===== INPUTS ======')
for k, v in pairs(colorutils.getColors(rsr.mask())) do
  print("-> " .. v .. ": true")
end
print()

print('===== OUTPUTS ======')
for k, v in pairs(colorutils.getColors(rsw.mask())) do
  print("-> " .. v .. ": true")
end
print()

print("======> Redstone server enabled!")
print()
events.runLoop()

-- TODO onStop ?

print("======> Redstone server disabled!")
modem.close(SERVER_COMMAND_CHANNEL)
